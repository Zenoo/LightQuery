class LightQuery{constructor(parameter,context){this._elements=[],parameter instanceof Function?window.addEventListener("load",()=>{Reflect.apply(parameter,null,[])}):this._elements.push(...LightQuery._STD(parameter,context))}static _STD(parameter,context){const result=[];switch(parameter.constructor){case Element:result.push(parameter);break;case NodeList:case Array:result.push(...Array.from(parameter));break;case String:try{const elements=(context||document).querySelectorAll(parameter);result.push(...Array.from(elements))}catch(error){const template=document.createElement("template");template.innerHTML=parameter,result.push(...Array.from(template.content.childNodes))}}return result}add(parameter,context){return parameter instanceof LightQuery?this._elements.push(...parameter._elements):this._elements.push(...LightQuery._STD(parameter,context)),this}addClass(parameter){return this._elements.forEach(element=>{element.classList.add(...parameter.split(/\s+/))}),this}after(...elements){return this._elements.forEach(element=>{elements.forEach(newElement=>{let previousElement=element;LightQuery._STD(newElement).forEach(newSingleElement=>{previousElement.parentNode.insertBefore(newSingleElement,previousElement.nextSibling),previousElement=newSingleElement})})}),this}append(...elements){return this._elements.forEach(element=>{elements.forEach(newElement=>{element.append(...LightQuery._STD(newElement))})}),this}appendTo(targets){return LightQuery._STD(targets).forEach(target=>{target.append(...this._elements)}),this}attr(name,value){return void 0===value?this._elements[0].getAttribute(name):(this._elements.forEach(element=>{element.setAttribute(name,value)}),this)}}const $=parameter=>new LightQuery(parameter);
class LightQuery{constructor(parameter,context){switch(this._elements=[],parameter.constructor){case Element:this._elements.push(parameter);break;case NodeList:this._elements.push(...Array.from(parameter));break;case String:try{const elements=(context||document).querySelectorAll(parameter);this._elements.push(...Array.from(elements))}catch(error){const template=document.createElement("template");template.innerHTML=parameter,this._elements.push(...Array.from(template.content.childNodes))}break;case Function:window.addEventListener("load",()=>{Reflect.apply(parameter,null,[])});break;default:console.warn("LightQuery: Invalid parameter.")}}add(parameter,context){return parameter instanceof LightQuery?this._elements.push(...parameter._elements):this._elements.push(...new LightQuery(parameter,context)._elements),this}addClass(parameter){return parameter instanceof Function?this._elements.forEach((element,index)=>{element.classList.add(...Reflect.apply(parameter,element,[index]).split(/\s+/))}):this._elements.forEach(element=>{element.classList.add(...parameter.split(/\s+/))}),this}}const $=parameter=>new LightQuery(parameter);
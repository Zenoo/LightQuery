class LightQuery{constructor(parameter,context){this._elements=[],parameter instanceof Function?window.addEventListener("load",()=>{Reflect.apply(parameter,null,[])}):this._elements.push(...LightQuery._STD(parameter,context))}static _STD(parameter,context){const result=[];switch(parameter.constructor){case Element:result.push(parameter);break;case NodeList:case Array:result.push(...Array.from(parameter));break;case String:try{const elements=(context||document).querySelectorAll(parameter);result.push(...Array.from(elements))}catch(error){const template=document.createElement("template");template.innerHTML=parameter,result.push(...Array.from(template.content.childNodes))}}return result}add(parameter,context){return parameter instanceof LightQuery?this._elements.push(...parameter._elements):this._elements.push(...LightQuery._STD(parameter,context)),this}addClass(parameter){return parameter instanceof Function?this._elements.forEach((element,index)=>{element.classList.add(...Reflect.apply(parameter,element,[index]).split(/\s+/))}):this._elements.forEach(element=>{element.classList.add(...parameter.split(/\s+/))}),this}after(...elements){return this._elements.forEach((element,index)=>{if(elements[0]instanceof Function){const newElements=LightQuery._STD(Reflect.apply(elements[0],element,[index]));let previousElement=element;newElements.forEach(newElement=>{previousElement.parentNode.insertBefore(newElement,previousElement.nextSibling),previousElement=newElement})}else elements.forEach(newElement=>{let previousElement=element;LightQuery._STD(newElement).forEach(newSingleElement=>{previousElement.parentNode.insertBefore(newSingleElement,previousElement.nextSibling),previousElement=newSingleElement})})}),this}append(...elements){return this._elements.forEach((element,index)=>{if(elements[0]instanceof Function){const newElements=LightQuery._STD(Reflect.apply(elements[0],element,[index]));newElements.forEach(newElement=>{element.appendChild(newElement)})}else elements.forEach(newElement=>{LightQuery._STD(newElement).forEach(newSingleElement=>{element.appendChild(newSingleElement)})})}),this}}const $=parameter=>new LightQuery(parameter);